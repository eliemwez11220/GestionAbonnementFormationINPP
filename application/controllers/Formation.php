<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Formation extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Formation_model');
    } 

    /*
     * Listing of formations
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('formation/index?');
        $config['total_rows'] = $this->Formation_model->get_all_formations_count();
        $this->pagination->initialize($config);

        $data['formations'] = $this->Formation_model->get_all_formations($params);
        
        $data['_view'] = 'formation/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new formation
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('numRef','NumRef','required|is_unique[formations.numRef]');
		$this->form_validation->set_rules('intituleSession','IntituleSession','required');
		$this->form_validation->set_rules('domaine_sid','Domaine Sid','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'domaine_sid' => $this->input->post('domaine_sid'),
				'numRef' => $this->input->post('numRef'),
				'intituleSession' => $this->input->post('intituleSession'),
				'statutSession' => $this->input->post('statutSession'),
				'datedebut' => $this->input->post('datedebut'),
				'DateFin' => $this->input->post('DateFin'),
				'Duree' => $this->input->post('Duree'),
				'Prix' => $this->input->post('Prix'),
				'Prerequis' => $this->input->post('Prerequis'),
				'Objectifs' => $this->input->post('Objectifs'),
				'Outils' => $this->input->post('Outils'),
				'Contenu' => $this->input->post('Contenu'),
            );
            
            $formation_id = $this->Formation_model->add_formation($params);
            redirect('formation/index');
        }
        else
        {
			$this->load->model('Domaine_model');
			$data['all_domaines'] = $this->Domaine_model->get_all_domaines();
            
            $data['_view'] = 'formation/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a formation
     */
    function edit($forma_id)
    {   
        // check if the formation exists before trying to edit it
        $data['formation'] = $this->Formation_model->get_formation($forma_id);
        
        if(isset($data['formation']['forma_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('numRef','NumRef','required|is_unique[formations.numRef]');
			$this->form_validation->set_rules('intituleSession','IntituleSession','required');
			$this->form_validation->set_rules('domaine_sid','Domaine Sid','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'domaine_sid' => $this->input->post('domaine_sid'),
					'numRef' => $this->input->post('numRef'),
					'intituleSession' => $this->input->post('intituleSession'),
					'statutSession' => $this->input->post('statutSession'),
					'datedebut' => $this->input->post('datedebut'),
					'DateFin' => $this->input->post('DateFin'),
					'Duree' => $this->input->post('Duree'),
					'Prix' => $this->input->post('Prix'),
					'Prerequis' => $this->input->post('Prerequis'),
					'Objectifs' => $this->input->post('Objectifs'),
					'Outils' => $this->input->post('Outils'),
					'Contenu' => $this->input->post('Contenu'),
                );

                $this->Formation_model->update_formation($forma_id,$params);            
                redirect('formation/index');
            }
            else
            {
				$this->load->model('Domaine_model');
				$data['all_domaines'] = $this->Domaine_model->get_all_domaines();

                $data['_view'] = 'formation/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The formation you are trying to edit does not exist.');
    } 

    /*
     * Deleting formation
     */
    function remove($forma_id)
    {
        $formation = $this->Formation_model->get_formation($forma_id);

        // check if the formation exists before trying to delete it
        if(isset($formation['forma_id']))
        {
            $this->Formation_model->delete_formation($forma_id);
            redirect('formation/index');
        }
        else
            show_error('The formation you are trying to delete does not exist.');
    }
    
}
